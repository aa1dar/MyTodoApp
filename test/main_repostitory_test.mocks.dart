// Mocks generated by Mockito 5.4.2 from annotations
// in todo_app/test/main_repostitory_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_app/storage/dto/task_action_dto.dart' as _i6;
import 'package:todo_app/storage/dto/task_dto.dart' as _i5;
import 'package:todo_app/storage/dto/task_list_dto.dart' as _i2;
import 'package:todo_app/storage/local/revision_local_repository.dart' as _i7;
import 'package:todo_app/storage/local/task_list_local_repository.dart' as _i3;
import 'package:todo_app/storage/network/task_list_network_repository.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskListDto_0 extends _i1.SmartFake implements _i2.TaskListDto {
  _FakeTaskListDto_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskListLocalRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskListLocalRepository extends _i1.Mock
    implements _i3.TaskListLocalRepository {
  MockTaskListLocalRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<dynamic> open(String? path) => (super.noSuchMethod(
        Invocation.method(
          #open,
          [path],
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<int> insertTask(_i5.TaskDto? dto) => (super.noSuchMethod(
        Invocation.method(
          #insertTask,
          [dto],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<List<_i5.TaskDto>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i4.Future<List<_i5.TaskDto>>.value(<_i5.TaskDto>[]),
      ) as _i4.Future<List<_i5.TaskDto>>);
  @override
  _i4.Future<_i5.TaskDto?> getTask(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getTask,
          [id],
        ),
        returnValue: _i4.Future<_i5.TaskDto?>.value(),
      ) as _i4.Future<_i5.TaskDto?>);
  @override
  _i4.Future<int> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<int> update(_i5.TaskDto? dto) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [dto],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<int> deleteAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllTasks,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<void> saveAll(List<_i5.TaskDto>? dtos) => (super.noSuchMethod(
        Invocation.method(
          #saveAll,
          [dtos],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<dynamic> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<List<_i6.TaskActionDto>> getAllActions() => (super.noSuchMethod(
        Invocation.method(
          #getAllActions,
          [],
        ),
        returnValue:
            _i4.Future<List<_i6.TaskActionDto>>.value(<_i6.TaskActionDto>[]),
      ) as _i4.Future<List<_i6.TaskActionDto>>);
  @override
  _i4.Future<int> deleteAllActions() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllActions,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}

/// A class which mocks [RevisionLocalRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRevisionLocalRepository extends _i1.Mock
    implements _i7.RevisionLocalRepository {
  MockRevisionLocalRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> saveNetworkRevision(int? revision) => (super.noSuchMethod(
        Invocation.method(
          #saveNetworkRevision,
          [revision],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<int?> getNetworkRevision() => (super.noSuchMethod(
        Invocation.method(
          #getNetworkRevision,
          [],
        ),
        returnValue: _i4.Future<int?>.value(),
      ) as _i4.Future<int?>);
  @override
  _i4.Future<bool> saveLocalRevision(int? revision) => (super.noSuchMethod(
        Invocation.method(
          #saveLocalRevision,
          [revision],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<int?> getLocalRevision() => (super.noSuchMethod(
        Invocation.method(
          #getLocalRevision,
          [],
        ),
        returnValue: _i4.Future<int?>.value(),
      ) as _i4.Future<int?>);
}

/// A class which mocks [TaskListNetworkRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskListNetworkRepository extends _i1.Mock
    implements _i8.TaskListNetworkRepository {
  MockTaskListNetworkRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.TaskListDto> fetchTaskList() => (super.noSuchMethod(
        Invocation.method(
          #fetchTaskList,
          [],
        ),
        returnValue: _i4.Future<_i2.TaskListDto>.value(_FakeTaskListDto_0(
          this,
          Invocation.method(
            #fetchTaskList,
            [],
          ),
        )),
      ) as _i4.Future<_i2.TaskListDto>);
  @override
  _i4.Future<int> sendNewTask(
    _i5.TaskDto? dto,
    int? lastKnownRevision,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendNewTask,
          [
            dto,
            lastKnownRevision,
          ],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<int> changeTask(
    String? taskId,
    _i5.TaskDto? dto,
    int? lastKnownRevision,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeTask,
          [
            taskId,
            dto,
            lastKnownRevision,
          ],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<int> deleteTask(
    String? taskId,
    int? lastKnownRevision,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [
            taskId,
            lastKnownRevision,
          ],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<int> patchTasks(_i2.TaskListDto? dto) => (super.noSuchMethod(
        Invocation.method(
          #patchTasks,
          [dto],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
